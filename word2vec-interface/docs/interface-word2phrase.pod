=head3 W2PExecuteTraining

Description:

 Executes word2phrase training based on parameters. Parameter variables have higher precedence than member variables.
 Any parameter specified will override its respective member variable.

 Note: If no parameters are specified, this module executes word2phrase training based on preset member
 variables. Returns string regarding training status.

Input:

 $trainFilePath  -> Training text corpus file path
 $outputFilePath -> Vector binary file path
 $minCount       -> Minimum bi-gram frequency (Positive Integer)
 $threshold      -> Maximum bi-gram frequency (Positive Integer)
 $debug          -> Displays word2phrase debug information during training. (0 = None, 1 = Show Debug Information, 2 = Show Even More Debug Information)
 $overwrite      -> Overwrites old training file when executing training. (0 = False / 1 = True)

Output:

 $value          -> '0' = Successful / '-1' = Un-successful

Example:

 use Word2vec::Interface;

 my $interface = Word2vec::Interface->new();
 $interface->W2PSetMinCount( 12 );
 $interface->W2PSetMaxCount( 20 );
 $interface->W2PSetTrainFilePath( "textCorpus.txt" );
 $interface->W2PSetOutputFilePath( "phraseTextCorpus.txt" );
 $interface->W2PExecuteTraining();
 undef( $interface );

 # Or

 use Word2vec::Interface;

 my $interface = Word2vec::Interface->new();
 $interface->W2PExecuteTraining( "textCorpus.txt", "phraseTextCorpus.txt", 12, 20, 2, 1 );
 undef( $interface );

=head3 W2PExecuteStringTraining

Description:

 Executes word2phrase training based on parameters. Parameter variables have higher precedence than member variables.
 Any parameter specified will override its respective member variable.

 Note: If no parameters are specified, this module executes word2phrase training based on preset member
 variables. Returns string regarding training status.

Input:

 $trainingString -> String to train
 $outputFilePath -> Vector binary file path
 $minCount       -> Minimum bi-gram frequency (Positive Integer)
 $threshold      -> Maximum bi-gram frequency (Positive Integer)
 $debug          -> Displays word2phrase debug information during training. (0 = None, 1 = Show Debug Information, 2 = Show Even More Debug Information)
 $overwrite      -> Overwrites old training file when executing training. (0 = False / 1 = True)

Output:

 $value          -> '0' = Successful / '-1' = Un-successful

Example:

 use Word2vec::Interface;

 my $interface = Word2vec::Interface->new();
 $interface->W2PSetMinCount( 12 );
 $interface->W2PSetMaxCount( 20 );
 $interface->W2PSetTrainFilePath( "large string to train here" );
 $interface->W2PSetOutputFilePath( "phraseTextCorpus.txt" );
 $interface->W2PExecuteTraining();
 undef( $interface );

 # Or

 use Word2vec::Interface;

 my $interface = Word2vec::Interface->new();
 $interface->W2PExecuteTraining( "large string to train here", "phraseTextCorpus.txt", 12, 20, 2, 1 );
 undef( $interface );

=head2 Word2Phrase Accessor Functions

=head3 W2PGetDebugLog

Description:

 Returns the _debugLog member variable set during Word2vec::Interface object initialization of new function.

Input:

 None

Output:

 $value -> 0 = False, 1 = True

Example:

 use Word2vec::Interface;

 my $interface = Word2vec::Interface->new();
 my $debugLog = $interface->W2PGetDebugLog();

 print( "Debug Logging Enabled\n" ) if $debugLog == 1;
 print( "Debug Logging Disabled\n" ) if $debugLog == 0;

 undef( $interface );

=head3 W2PGetWriteLog

Description:

 Returns the _writeLog member variable set during Word2vec::Interface object initialization of new function.

Input:

 None

Output:

 $value -> 0 = False, 1 = True

Example:

 use Word2vec::Interface;

 my $interface = Word2vec::Interface->new();
 my $writeLog = $interface->W2PGetWriteLog();

 print( "Write Logging Enabled\n" ) if $writeLog == 1;
 print( "Write Logging Disabled\n" ) if $writeLog == 0;

 undef( $interface );

=head3 W2PGetFileHandle

Description:

 Returns file handle used by word2phrase::WriteLog() method.

Input:

 None

Output:

 $fileHandle -> Returns file handle blob used by 'WriteLog()' function or undefined.

Example:

 <This should not be called.>

=head3 W2PGetTrainFilePath

Description:

 Returns (string) training file path.

Input:

 None

Output:

 $string -> word2phrase training file path

Example:

 use Word2vec::Interface;

 my $interface = Word2vec::Interface->new();
 my $filePath = $interface->W2PGetTrainFilePath();

 print( "Output File Path: $filePath\n" ) if defined( $filePath );
 undef( $interface );

=head3 W2PGetOutputFilePath

Description:

 Returns (string) output file path.

Input:

 None

Output:

 $string -> word2phrase output file path

Example:

 use Word2vec::Interface;

 my $interface = Word2vec::Interface->new();
 my $filePath = $interface->W2PGetOutputFilePath();

 print( "Output File Path: $filePath\n" ) if defined( $filePath );
 undef( $interface );

=head3 W2PGetMinCount

Description:

 Returns (integer) minimum bi-gram range.

Input:

 None

Output:

 $value ->  Minimum bi-gram frequency (Positive Integer)

Example:

 use Word2vec::Interface;

 my $interface = Word2vec::Interface->new();
 my $mincount = $interface->W2PGetMinCount();

 print( "MinCount: $mincount\n" ) if defined( $mincount );
 undef( $interface );

=head3 W2PGetThreshold

Description:

 Returns (integer) maximum bi-gram range.

Input:

 None

Output:

 $value ->  Maximum bi-gram frequency (Positive Integer)

Example:

 use Word2vec::Interface;

 my $interface = Word2vec::Interface->new();
 my $mincount = $interface->W2PGetThreshold();

 print( "MinCount: $mincount\n" ) if defined( $mincount );
 undef( $interface );

=head3 W2PGetW2PDebug

Description:

 Returns word2phrase debug parameter value.

Input:

 None

Output:

 $value -> 0 = No debugging, 1 = Show debugging, 2 = Show even more debugging

Example:

 use Word2vec::Interface;

 my $interface = Word2vec::Interface->new();
 my $interfacedebug = $interface->W2PGetW2PDebug();

 print( "Word2Phrase Debug Level: $interfacedebug\n" ) if defined( $interfacedebug );

 undef( $interface );

=head3 W2PGetWorkingDir

Description:

 Returns (string) working directory path.

Input:

 None

Output:

 $string -> Current working directory path

Example:

 use Word2vec::Interface;

 my $interface = Word2vec::Interface->new();
 my $workingDir = $interface->W2PGetWorkingDir();

 print( "Working Directory: $workingDir\n" ) if defined( $workingDir );

 undef( $interface );

=head3 W2PGetWord2PhraseExeDir

Description:

 Returns (string) word2phrase executable directory path.

Input:

 None

Output:

 $string -> Word2Phrase executable directory path

Example:

 use Word2vec::Interface;

 my $interface = Word2vec::Interface->new();
 my $workingDir = $interface->W2PGetWord2PhraseExeDir();

 print( "Word2Phrase Executable Directory: $workingDir\n" ) if defined( $workingDir );

 undef( $interface );

=head3 W2PGetOverwriteOldFile

Description:

 Returns the current value of the overwrite training file variable.

Input:

 None

Output:

 $value -> 1 = True/Overwrite or 0 = False/Append to current file

Example:

 use Word2vec::Interface;

 my $interface = Word2vec::Interface->new();
 my $overwrite = $interface->W2PGetOverwriteOldFile();

 if defined( $overwrite )
 {
    print( "Overwrite Old File: " );
    print( "Yes\n" ) if $overwrite == 1;
    print( "No\n" ) if $overwrite == 0;
 }

 undef( $interface );

=head2 Word2Phrase Mutator Functions

=head3 W2PSetTrainFilePath

Description:

 Sets training file path.

Input:

 $string -> Training file path

Output:

 None

Example:

 use Word2vec::Interface;

 my $interface = Word2vec::Interface->new();
 $interface->W2PSetTrainFilePath( "filePath" );

 undef( $interface );

=head3 W2PSetOutputFilePath

Description:

 Sets word2phrase output file path.

Input:

 $string -> word2phrase output file path

Output:

 None

Example:

 use Word2vec::Interface;

 my $interface = Word2vec::Interface->new();
 $interface->W2PSetOutputFilePath( "filePath" );

 undef( $interface );

=head3 W2PSetMinCount

Description:

 Sets minimum range value.

Input:

 $value -> Minimum frequency value (Positive integer)

Output:

 None

Example:

 use Word2vec::Interface:

 my $interface = Word2vec::Interface->new();
 $interface->W2PSetMinCount( 1 );

 undef( $interface );

=head3 W2PSetThreshold

Description:

 Sets maximum range value.

Input:

 $value -> Maximum frequency value (Positive integer)

Output:

 None

Example:

 use Word2vec::Interface:

 my $interface = Word2vec::Interface->new();
 $interface->W2PSetThreshold( 100 );

 undef( $interface );

=head3 W2PSetW2PDebug

Description:

 Sets word2phrase debug parameter.

Input:

 $value -> word2phrase debug parameter (0 = No debug info, 1 = Show debug info, 2 = Show more debug info.)

Output:

 None

Example:

 use Word2vec::Interface:

 my $interface = Word2vec::Interface->new();
 $interface->W2PSetW2PDebug( 2 );

 undef( $interface );

=head3 W2PSetWorkingDir

Description:

 Sets working directory path.

Input:

 $string -> Current working directory path.

Output:

 None

Example:

 use Word2vec::Interface:

 my $interface = Word2vec::Interface->new();
 $interface->W2PSetWorkingDir( "filePath" );

 undef( $interface );

=head3 W2PSetWord2PhraseExeDir

Description:

 Sets word2phrase executable file directory path.

Input:

 $string -> Word2Phrase executable directory path.

Output:

 None

Example:

 use Word2vec::Interface:

 my $interface = Word2vec::Interface->new();
 $interface->W2PSetWord2PhraseExeDir( "filePath" );

 undef( $interface );

=head3 W2PSetOverwriteOldFile

Description:

 Enables overwriting word2phrase output file if one already exists with the same output file name.

Input:

 $value -> Integer: 1 = Overwrite old file, 0 = No not overwrite old file.

Output:

 None

Example:

 use Word2vec::Interface:

 my $interface = Word2vec::Interface->new();
 $interface->W2PSetOverwriteOldFile( 1 );

 undef( $interface );